#Algorithm
1. if head is null then return head;
2. set curr = head;
3. move pointer to next head =head->next
4. make head->prev =nullptr
5. delete curr;
6. return head;

#implementation:
#include<iostream>
using namespace std;
class Node{
    public:
     int data;
     Node*prev,*next;
     Node(int new_data): data(new_data),prev(nullptr),next(nullptr){}

};
void traversal(Node* head){
      while(head!=nullptr){
         cout<<head->data<<" ";
         head=head->next;
} 
cout<<endl;
}
Node* deleteAtbegg(Node* head){
        if(head==nullptr) return head;
        Node* curr =head;
        head =head->next;
        delete curr;
         return head;
        
}
 int main(){
      Node* head =new Node(10);
      head->next = newNode(20);
      head->next->prev =head;
      head->next->next =new Node(30);
      head->next->next->prev = head->next;
      traversal(head);
      head=deleteAtBegg(head);
      traversal(head);
 
      return 0;
}