//Algorithm:
1. for forward traversal :
   curr=head
   while curr is Not null
         print curr->data
          update curr =curr->next
2. for backward traversal:
   curr=tail
   while curr is not null
        print curr ->data
          update curr =curr ->prev

//Implementation:

#include<iostream>
using namespace std;
class Node{
   public:
      int data;
      Node* prev,* next;
      Node(int new_data){
         data=new_data;
         prev=next =null
}

};

void forwardTraversal(Node *head){
     //  if(head==nullptr){
    //      return ;
//}
      // cout<<head->data;
   //  forwardTraveral(head->next);
       Node* curr=head;
       while(curr!=null){
       cout<<curr->data<<" ";
       curr =curr->next;
}
cout<<endl;
}

void backwardTraversal(Node* tail){
     Node* curr =tail;
    while(curr!=null){
     cout<<curr->data<<" ";
     curr=curr->prev;

} 
cout<<endl;
}
int main(){
   Node* head = new Node(10);
   Node* second = new Node(20);
   Node* third = new Node (30);
 
    head->next = second;
    second->prev = head;
    second->next = third;
    third->prev =second;
    forwardTraversal(head);
    backwardTraversal(third);
 return 0;
}