//Algorithm:

1. create new Node using new data
2. put head pointer to the newNode next;
3. if head is not null put head->prev = newNode
4. update head with newNode and return

#implementation
#include<iostream>
using namespace std;
class Node{
       public:
        int data;
        Node* prev,* next;
        Node(int new_data): data(new_data),prev(nullptr),next(nullptr){}
};

void traversal(Node* head){
    Node* curr =head;
    while(curr!=nullptr){
       cout<<curr->data<<" ";
        curr=curr->next;
}
cout<<endl;
}

Node* insertAtbegg(Node* head,int val){
           Node * newNode = new Node(val);
           newNode->next = head;
           if(head!=nullptr){
              head->prev =nullptr;
}
              head=newNode;
             return head;
}
int main(){ 
     Node* head = new Node(10);
     head->next = new Node(20);
     head->next->prev = head;
     head->next->next = new Node(30);
     head->next->next->prev = head->next;
     traversal(head);
     int val=40;
     head=insertAtBegg(head,val);
     traversal(head);
         return 0;
}