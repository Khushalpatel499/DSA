// Algorithm:
1. Check if head is null return null.
2. store the head to curr.
3. move the head pointer to next.
4. delete the curr node.
5. return the new head.

//1. If head == null return null
  2. curr =head
  3. head = head -> next;
  4. delete curr
  5. return head

#implementation

#include<iostream>
using namespace std;
class Node{
    public:
      int data;
      Node* next;
      Node(int new_data){
        this->data =new_data;
        this->next = nullptr;
       }
};

void traversal(Node* head){
    Node* curr =head;
    while(curr!=null){
         cout<<curr->data<<" ";
         curr=curr->next;
}
 cout<<endl;
}

Node* deleteAtBegg(Node* head){
   if(head==nullptr) return nullptr;
   Node* curr=head;
   head=head->next;
   delete curr;
   return head;
}

int main(){
  Node* head = new Node(10);
  head->next = new Node(20);
  head->next->next = new Node(30);
  head->next->next->next = new Node(40);
  traversal(head);
 head =deleteAtBegg(head);
  traversal(head);
  return 0;
}