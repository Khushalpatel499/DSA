#Algorithm
1. If List is Empty return null
2. if head->next is null delete the head and return null
3. else traverse second last node by while loop
4.  delete secondLast Node next.
5.  change the secondLastNode next to null
6. return head

// 1. If head==null return null
   2. if head->next==null  delete head return null
   3. curr =head
   4. while curr->next->next!=null
   5.       curr=curr->next
   6. delete(curr->next)
   7. curr->next =null
  8. return head;

//Implementation

#include<iostream>
using namespace std;
class Node{
    public:
       int data;
       Node* next;
      Node(int new_data){
          this->data = new_data;
          this->next = nullptr;
     }
};

void traversal(Node* head){
       Node* curr =head;
       while(curr!=nullptr){ 
      cout<<curr->data<<" ";
     curr=curr->next;
}
cout<<endl;
}

Node* deleteAtEnd(Node* head){
        if(head==nullptr) return nullptr;
        if(head->next==nullptr){
            delete head;
             return nullptr;
}
       Node* curr=head;
     while(curr->next->next !=null){
           curr=curr->next;
}
       delete(curr->next);
       curr->next=nullptr;
      return head;
}
int main(){
      Node* head = new Node(10);
      head->next = new Node(20);
      head->next->next = new Node(30);
      head->next->next->next = new Node(40);

      traversal(head);
     
     return 0;
}
 