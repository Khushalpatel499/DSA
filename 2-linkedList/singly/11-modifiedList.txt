//modified std
// repalce first half node with the value of last corrosponding nodes- start corrosponding nodes and second half nodes are reverse order of first half nodes.

// 10 20 30 40  10 20 30 40 50
// 30 10 20 10  40 20 30 20 10 

//Implementation
#include<iostream>
#include<vector>
using namespace std;
class Node{
       public:
       int data;
       Node* next;
       Node(int new_data){
       this->data = new_data;
       this->next = nullptr;

}
};

void traversal(Node* head){
       Node* curr=head;
       while(curr!=nullptr){
            cout<<curr->data<<" ";
            curr=curr->next;
}
cout<<endl;
}

void listToVector(vector<int>&v,Node* head){
          Node* curr=head;
          while(curr!=null){
           v.push_back(curr->data);
          curr=curr->next;
}
}

void modifiedVector(vector<int> &v){
          int n=v.size();
         for(int i=0;i<n/2;i++){
          int temp =v[n-1-i]-v[i];
            v[n-1-i] =v[i];
           v[i] =temp;
}
}

void vectorToList(vector<int> &v,Node* head){
           Node* curr=head;
          for(int i=0;i<v.size();i++){
             curr->data=v[i];
             curr=curr->next;
}
}

Node* modifiedList(Node* head){
        vector<int> v;
        listToVector(v,head);
        modifiedVector(v);
        vectorToList(v,head);
        return head;
}

int main(){
    Node* head = new Node(10);
    head->next = new Node(20);
    head->next->next = new Node(30);
    head->next->next->next = new Node(40);
    traversal(head);
    head=modifiedList(head);
    traversal(head);
    return 0;
    
}