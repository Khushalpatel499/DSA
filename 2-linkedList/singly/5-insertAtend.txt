//Algorithm:
1.create a new Node and add the data.
2. traverse the list and add data Node to the last and update address of last to new Node address.
3. traverse the list

1. create newNode =key;
2.  curr=head;
3. while curr->next Not null
    a.  curr=curr->next;
4. curr->next =newNode;
5. return head;

// implementation

#include<iostream>
using namespace std;
class Node{
    int data;
    Node* next;
    Node(int new_data){
       this->data=new_data;
       this->next =nullptr;
        }
};

void traverse(Node* head){
     Node* curr = head;
     while(curr!=nullptr){
         cout<<curr->data<<" ";
        curr=curr->next; 
}
  cout<<endl;
}

Node* insertAtEnd(Node* head,int key){
     Node* newNode= new Node(key);
       if(head==nullptr){
             return newNode;
}
    Node* curr =head;
     while(curr->next!=nullptr){
     curr=curr->next;
}
         curr->next=newNode;
       return head;
      
}
int main(){
     Node* head = new Node(10);
     head->next = new Node(20);
     head->next->next =new Node(30);
     head->next->next = new Node(40);
     traverse(head);
    int key=50;
     head =insertAtEnd(head,key);
     traverse(head);

    
   return 0;
}