// algorithm:
1. create three pointer curr =head,prev =nullptr,next=nullptr
2. while curr is Not null
3.      next=curr->next;
4.      curr->next=prev;
5.      prev=curr;
6.      curr=next;
7. return prev;

//implementation:
#include<iostream>
using namespace std;
class Node{
      public:
         int data;
         Node* next;
         Node(int new_data){
             this->data = new_data;
             this->next =nullptr;
}
};
void traversal(Node* head){
    Node* curr = head;
   while(curr!=nullptr){
     cout<<curr->data<<"";
    curr=curr->next;
}
cout<<endl;
}
Node* reverseList(Node* head){
   Node* curr=head,*prev=nullptr,*next=nullptr;
    while(curr!=nullptr){
         next =curr->next;
         curr->next =prev;
         prev =curr;
         curr=next;
}
         return prev;
}
int main(){
   Node* head = new Node(10);
   head->next = new Node(20);
   head->next->next = new Node(30);
   head->next->next->next =new Node(40);
   traversal(head);
   head = reverseList(head);

 return 0;
}
