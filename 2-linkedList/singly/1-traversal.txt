//Algorithm:
1. Intialize a pointer to the head of list.(current)
2. loop through the list while loop become null(using while).
3. process each node(print data).
4. move to the next node my updating the node.(current).

//1. set current =head;
  2. while(current!=null){
  3.    print current->data.
  4.    current =current->next.
     }


//iterative approach
#include<iostream>
using namespace std;
class Node{
   public:
           int data;
           Node* next;

         Node(int new_data){
            this->data =new_data;
            this->next = nullptr;

       }

};

 void traversalList(Node* head){
       while(head!=nullptr){
           cout<<head->data<<" ";
            head =head->next;
       
              }
    cout<<endl;

}
int main(){
    Node* head =new Node(10);
     head->next = new Node(20);
     head->next->next = new Node(30);
     head->next->next->next = new Node(40);
    traversalList(head);

 return 0;
}



//Recursive approach

#include<iostream>
using namespace std;

class Node{
     public:
     int data;
     Node* next;
     
     Node(int new_data){
       this->data= new_data;  
       this->next = nullptr;
}

};
 
void traverseList(Node* head){
      if(head==nullptr){
      cout<<endl;
return ;
}
      cout<<head->data<<" ";
traverseList(head->next);

}

int main(){
    Node* head = new Node(10);
    head->next = new Node(20);
    head->next->next = new Node(30);
    head->next->next->next = new Node(40);

    traverseList(head);
return 0;
}
