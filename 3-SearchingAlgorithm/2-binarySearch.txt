// binary search: 1. iterative  approach
// time=O(logn)
// spaceO(1)


#include<iostream>
#include<vector>

using namespace std;

int binarySearch(vector<int>v,int t){
    
    int l=0;
    int h=v.size()-1;
    while(l<=h){
        int mid =(l+h)/2;
        
        if(v[mid]==t){
            return mid;
        } else if(v[mid]>t){
            h=mid-1;
        }else{
            l=mid+1;
        }
        
    }
    return -1;
    
}


int main(){
    vector<int> t={2,3,4,10,14};
    int x=10;
    
    int result =binarySearch(t,x);
    cout<<result<<endl;
    
    
    return 0;
}





// binary search: 1. recurssive  approach
// time=O(logn)
// spaceO(1)


#include<iostream>
#include<vector>

using namespace std;

int binarySearch(vector<int> &v,int l,int h,int x){
    
    while(l<=h){
        int mid = l+(h-l)/2;
        
        if(v[mid]==x){
            return mid;
        } else if(v[mid]>x){
         return  binarySearch(v,l,mid-1,x);
        }else{
          return  binarySearch(v,mid+1,h,x);
        }
        
    }
    return -1;
    
}


int main(){
    vector<int> v={2,3,4,10,14};
    int n=v.size()-1;
    int x=10;
    
    int result =binarySearch(v,0,n,x);
    cout<<result<<endl;
    
    
    return 0;
}