// move all zero's to end 
// naive approach: 1. contain a temp array 
// time: O(n) space O(n)
#include<iostream>
#include<vector>
using namespace std;

vector<int> moveZeros(vector<int> &v){
    vector<int> temp;
    for(int i=0;i<v.size();i++){
        if(v[i]!=0){
            temp.push_back(v[i]);
        }
    }
    for(int i=temp.size();i<v.size();i++){
        temp.push_back(0);
    }
    return temp;
}

int main(){
    vector<int> v ={1,2,0,4,3,0,5,0};
    
    vector<int> res = moveZeros(v);
    for(int i=0;i<res.size();i++){
        cout<<res[i]<<" ";
    }
}


// move all zero's to end 
// better approach: 1. loop the array twice with carry a count variable.
// time: O(n) space O(1)
#include<iostream>
#include<vector>
using namespace std;

void moveZeros(vector<int> &v){
    
    int count =0;
    for(int i=0;i<v.size();i++){
        if(v[i]!=0){
            v[count++]=v[i];
        }
    }
    while(count<v.size()){
        v[count++]=0;
    }
    
}

int main(){
    vector<int> v ={1,2,0,4,3,0,5,0};
     moveZeros(v);
    for(int i=0;i<v.size();i++){
        cout<<v[i]<<" ";
    }
}




// move all zero's to end 
// expected approach: 1. loop the array ones with carry a count variable now instead of put we swap.
// time: O(n) space O(1)
#include<iostream>
#include<vector>
using namespace std;

void moveZeros(vector<int> &v){
    
    int count =0;
    for(int i=0;i<v.size();i++){
        if(v[i]!=0){
          swap(v[count],v[i]);
          count++;
        }
        
    }
    
}

int main(){
    vector<int> v ={1,2,0,4,3,0,5,0};
     moveZeros(v);
    for(int i=0;i<v.size();i++){
        cout<<v[i]<<" ";
    }
}




// move all zero's to end 
// using library: stable_partition: it basically reorder the element while preserving there order using the condition.
// sntax: stable_partition(start,end,lambadafunction {conditon});
// it move all the element to the front that stisifed the condition.
//ex: stable_partition(v.begin(),v.end(),[](int n){n!=0});
// what is lambadafunction: This is an anonymous (unnamed) function, called a lambda,
//syntax: [capture](parameters) -> return_type { body }
// [] → Capture clause (used to capture variables from surrounding scope)
//(int x) → Parameter list (in this case, each element of the vector)
//{ ... } → Function body

// time: O(n) space O(1)

#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;

void moveZeros(vector<int> &v){
    stable_partition(v.begin(),v.end(),[](int x){ return x!=0;});
    
}

int main(){
    vector<int> v ={1,2,0,4,3,0,5,0};
     moveZeros(v);
    for(int i=0;i<v.size();i++){
        cout<<v[i]<<" ";
    }
}




